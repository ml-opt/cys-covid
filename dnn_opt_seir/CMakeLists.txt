CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(dnn_opt)

IF(NOT ENABLE_CORE)
  SET(ENABLE_CORE ON)
ENDIF()

IF(NOT ENABLE_COPT)
  SET(ENABLE_COPT OFF)
ENDIF()

IF(NOT ENABLE_CUDA)
  SET(ENABLE_CUDA OFF)
ENDIF()

IF(NOT ENABLE_EXAMPLE)
  SET(ENABLE_EXAMPLE ON)
ENDIF()

INCLUDE_DIRECTORIES(src)

############################## CORE SETTINGS #################################

IF(ENABLE_CORE)
  ADD_DEFINITIONS(-DENABLE_CORE)
  
  FILE(GLOB_RECURSE CORE_SRC "src/core/*.cpp" "src/core/*.h")
  ADD_LIBRARY(dnn_opt_core ${CORE_SRC})

  SET_TARGET_PROPERTIES(dnn_opt_core PROPERTIES CXX_STANDARD 11 CXXSTANDARD_REQUIRED YES)
  SET_TARGET_PROPERTIES(dnn_opt_core PROPERTIES LINKER_LANGUAGE CXX)
  TARGET_LINK_LIBRARIES(dnn_opt_core LINK_PUBLIC ${Boost_LIBRARIES})
ENDIF(ENABLE_CORE)

############################## COPT SETTINGS #################################

IF(ENABLE_COPT)
  ADD_DEFINITIONS(-DENABLE_COPT)

  FIND_PACKAGE(BLAS REQUIRED)
  INCLUDE(FindOpenMP)
  INCLUDE_DIRECTORIES(${BLAS_INCLUDE_DIR} ${LAPACK_INCLUDE_DIR})
  
  SET(CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS} ${BLAS_LINKER_FLAGS})
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")

  FILE(GLOB_RECURSE COPT_SRC "src/copt/*.cpp" "src/copt/*.h")
  ADD_LIBRARY(dnn_opt_copt ${COPT_SRC})

  TARGET_LINK_LIBRARIES(dnn_opt_copt dnn_opt_core ${BLAS_LIBRARIES})

  SET_TARGET_PROPERTIES(dnn_opt_copt PROPERTIES CXX_STANDARD 11 CXXSTANDARD_REQUIRED YES)
  SET_TARGET_PROPERTIES(dnn_opt_copt PROPERTIES LINKER_LANGUAGE CXX)
ENDIF(ENABLE_COPT)

############################## CUDA SETTINGS #################################

IF(ENABLE_CUDA)
  ADD_DEFINITIONS(-DENABLE_CUDA)
  FIND_PACKAGE(CUDA REQUIRED)

  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

  # This is because a cuda-7 bug when using gcc-5
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_MWAITXINTRIN_H_INCLUDED")

  FILE(GLOB_RECURSE CUDA_SRC "src/cuda/*.cu")
  CUDA_COMPILE(CUDA ${CUDA_SRC} )

  CUDA_ADD_LIBRARY(dnn_opt_cuda ${CUDA})
  TARGET_LINK_LIBRARIES(dnn_opt_cuda dnn_opt_copt dnn_opt_core -L/usr/lib/cuda/lib64 -lcurand -lcublas)
ENDIF(ENABLE_CUDA)

############################### MPI SETTINGS #################################

#FIND_PACKAGE(MPI REQUIRED)

#SET(CMAKE_CXX_COMPILE_FLAGS ${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
#SET(CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS})

#INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})

#TARGET_LINK_LIBRARIES(DNN_OPT ${MPI_LIBRARIES})

################################# EXAMPLES ###################################

IF(ENABLE_EXAMPLE)
  FILE(GLOB EXAMPLES examples/*)
  FOREACH(EXAMPLE ${EXAMPLES})
    ADD_SUBDIRECTORY(${EXAMPLE})
  ENDFOREACH()
ENDIF(ENABLE_EXAMPLE)

UNSET(ENABLE_CORE)
UNSET(ENABLE_COPT)
UNSET(ENABLE_CUDA)
UNSET(ENABLE_EXAMPLE)
