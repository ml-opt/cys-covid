/*
Copyright (c) 2018, Jairo Rojas-Delgado <jrdelgado@uci.cu>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
* Neither the name of the <organization> nor the
names of its contributors may be used to endorse or promote products
derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef DNN_OPT_CORE_GENERATORS_GROUP
#define DNN_OPT_CORE_GENERATORS_GROUP

#include <vector>
#include <tuple>
#include <initializer_list>
#include <core/base/generator.h>

namespace dnn_opt
{
namespace core
{
namespace generators
{

/**
 * The group class represents a generator that is integrated by several other
 * generators. This allows to generate different parameters with different
 * distributions and domains depending of the problem it self. Also allows to
 * consider mixed discrete and continuous optimization problems
 *
 * @author Jairo Rojas-Delgado <jrdelgado@uci.cu>
 * @date November, 2018
 * @version 1.0
 */
class group : public virtual generator
{
public:

  static group* make(std::initializer_list<std::tuple<int, generator*>> members);

  /**
   * @brief Generate a sequence of random numbers no longer than the specified
   * count.
   *
   * The numbers are generated from @ref _members generators. Each member
   * generator $g_i$ generate an amount of $c_i$ of random numbers such as
   * $\sum_{i=0}^n{c_i} < count$ where $n$ is the amount of generators in
   * @ref _members.
   *
   * The first $c_0$ random numbers are generated by the generator $g_0$, then
   * $c_1$ random numbers are generated from $g_1$ and so on. If all generators
   * are used without reaching the @ref count limit, then the generation starts
   * for the first generator again.
   *
   * @param count the amount of random numbers to be generated.
   * @param params an array used to store the generated random numbers.
   */
  void generate(int count, float* params) const override;

  /**
   * @brief Returns a single value generated by the first @ref _member
   * generator.
   *
   * @return a randomly generated number.
   */
  virtual float generate() const override;

  virtual void set_constraints(int count, float* params) const override;

  virtual ~group();

protected:

  /**
   * The basic constructor for the group class.
   *
   * @param mean the mean of the grouply distributed generator.
   *
   * @param dev the standard deviation from the mean.
   */
  group(std::initializer_list<std::tuple<int, generator*>> members);

  /**
   * List of generators and the amount of parameters that should be generated
   * by each generator.
   */
  std::vector<std::tuple<int, generator*>> _members;

private:

  /** Total amount of parameters generated by all @ref _members. */
  int _max_gen_count;

};

} // namespace generators
} // namespace core
} // namespace dnn_opt

#endif
